AWSTemplateFormatVersion: '2010-09-09'
Description: Bar App APIs
Resources:
  AddBeerLambda:
    Properties:
      Code:
        S3Bucket: davis-bar-app
        S3Key: 2ae16c2dcd059e907a7dbb2c980d939f
      Description: Update beer count
      Handler: addBeer.lambda_handler
      Role:
        Fn::GetAtt:
        - BarAppLambdaRole
        - Arn
      Runtime: python3.6
      Timeout: '60'
    Type: AWS::Lambda::Function
  AddBeerLambdaPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - GetPeopleLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: BarAppApi
          - /*/POST/*/applications
    Type: AWS::Lambda::Permission
  ApiDeployment:
    DependsOn:
    - PeopleMethodGET
    - PeopleMethodOPTIONS
    - BeerMethodPOST
    - BeerMethodOPTIONS
    Properties:
      RestApiId:
        Ref: BarAppApi
    Type: AWS::ApiGateway::Deployment
  BarAppApi:
    Properties:
      Description: API suite that interacts with dynamoDB
      FailOnWarnings: true
      Name: Davis Bar App
    Type: AWS::ApiGateway::RestApi
  BarAppLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:*
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: BarAppPolicy
    Type: AWS::IAM::Role
  BarAppStage:
    DependsOn:
    - PeopleMethodGET
    - PeopleMethodOPTIONS
    - BeerMethodPOST
    - BeerMethodOPTIONS
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
      - HttpMethod: '*'
        LoggingLevel: ERROR
        MetricsEnabled: true
        ResourcePath: /*
      RestApiId:
        Ref: BarAppApi
      StageName: v1
    Type: AWS::ApiGateway::Stage
  BeerMethodOPTIONS:
    DependsOn:
    - AddBeerLambda
    - AddBeerLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: 200
      ResourceId:
        Ref: BeerResource
      RestApiId:
        Ref: BarAppApi
    Type: AWS::ApiGateway::Method
  BeerMethodPOST:
    DependsOn:
    - AddBeerLambda
    - AddBeerLambdaPermission
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - StatusCode: 200
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - AddBeerLambda
              - Arn
            - /invocations
      ResourceId:
        Ref: BeerResource
      RestApiId:
        Ref: BarAppApi
    Type: AWS::ApiGateway::Method
  BeerResource:
    DependsOn:
    - AddBeerLambda
    - AddBeerLambdaPermission
    Properties:
      ParentId:
        Fn::GetAtt:
        - BarAppApi
        - RootResourceId
      PathPart: beer
      RestApiId:
        Ref: BarAppApi
    Type: AWS::ApiGateway::Resource
  GetPeopleLambda:
    Properties:
      Code:
        S3Bucket: davis-bar-app
        S3Key: 9c9a4cfdcd81353c112a9e36f3bfe46d
      Description: Get People
      Handler: getPeople.lambda_handler
      Role:
        Fn::GetAtt:
        - BarAppLambdaRole
        - Arn
      Runtime: python3.6
      Timeout: '60'
    Type: AWS::Lambda::Function
  GetPeopleLambdaPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - GetPeopleLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: BarAppApi
          - /*/GET/*/applications
    Type: AWS::Lambda::Permission
  PeopleMethodGET:
    DependsOn:
    - GetPeopleLambda
    - GetPeopleLambdaPermission
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - StatusCode: 200
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - GetPeopleLambda
              - Arn
            - /invocations
      ResourceId:
        Ref: PeopleResource
      RestApiId:
        Ref: BarAppApi
    Type: AWS::ApiGateway::Method
  PeopleMethodOPTIONS:
    DependsOn:
    - GetPeopleLambda
    - GetPeopleLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: 200
      ResourceId:
        Ref: PeopleResource
      RestApiId:
        Ref: BarAppApi
    Type: AWS::ApiGateway::Method
  PeopleResource:
    DependsOn:
    - GetPeopleLambda
    - GetPeopleLambdaPermission
    Properties:
      ParentId:
        Fn::GetAtt:
        - BarAppApi
        - RootResourceId
      PathPart: people
      RestApiId:
        Ref: BarAppApi
    Type: AWS::ApiGateway::Resource
